# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mPpJeB3tIwIzt2W1IDJBTajVaLabnIps
"""

import streamlit as st
from datetime import date
from typing import Dict
from frankfurter import get_currencies, get_latest_rate, get_historical_rate
from currency import format_result

st.set_page_config(page_title="Currency Converter", page_icon="ðŸ’±", layout="centered")
st.title("Currency Converter")
st.caption("Latest or historical rates powered by Frankfurter.app")

@st.cache_data(ttl=6 * 60 * 60)
def load_currencies() -> Dict[str, str]:
    return dict(sorted(get_currencies().items()))

curr_map = load_currencies()
codes = list(curr_map.keys())
if not codes:
    st.error("Failed to load currencies.")
    st.stop()

st.subheader("1) Choose currencies and amount")
col1, col2 = st.columns(2)
with col1:
    from_code = st.selectbox(
        "From",
        options=codes,
        index=codes.index("AUD") if "AUD" in codes else 0,
        format_func=lambda c: f"{c} â€” {curr_map[c]}",
    )
with col2:
    to_code = st.selectbox(
        "To",
        options=codes,
        index=codes.index("USD") if "USD" in codes else 0,
        format_func=lambda c: f"{c} â€” {curr_map[c]}",
    )

amount = st.number_input("Amount", min_value=0.0, value=100.0, step=1.0)

st.subheader("2) Latest conversion")
if st.button("Get latest rate ðŸ”„"):
    try:
        rate = 1.0 if from_code == to_code else float(get_latest_rate(from_code, to_code))
        msg = format_result(date.today().isoformat(), from_code, to_code, rate, amount)
        st.success(msg)
    except Exception as e:
        st.error(f"Failed to fetch latest rate: {e}")

st.subheader("3) Historical conversion")
hist_date = st.date_input("Pick a past date", value=date.today(), max_value=date.today())
if st.button("Get rate for this date ðŸ“…"):
    try:
        rate = 1.0 if from_code == to_code else float(get_historical_rate(hist_date, from_code, to_code))
        msg = format_result(hist_date.isoformat(), from_code, to_code, rate, amount)
        st.success(msg)
    except Exception as e:
        st.error(f"Failed to fetch historical rate: {e}")

with st.sidebar:
    st.markdown("**Tips**")
    st.write("â€¢ Choose currencies and amount above.")
    st.write("â€¢ Click buttons for latest or historical rates.")
    st.write("â€¢ Results include forward and inverse rates.")
    st.markdown("---")
    st.markdown("Data: Frankfurter.app")