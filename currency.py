# -*- coding: utf-8 -*-
"""DSP for Assignment2 - API step 4 currency.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eksiz8bSNVJyOT8q8Mklf7kbwsfRFHHG
"""

from __future__ import annotations

# currency.py
"""
Formatting helpers for displaying conversion results in the Streamlit app.

Expected 3-line output template:

The conversion rate on <date> from <from currency> to <to currency> was <rate>
So <from amount> in <from currency> correspond to <to amount> in <to currency>
The inverse rate was <inverse rate>.

Notes on formatting:
- Amounts: show 1 decimal if integer-like (e.g., 100.0), else up to 2 decimals.
- Rates:
    - Forward rate: 2 decimals if >= 1, else up to 6 decimals (trim trailing zeros).
    - Inverse rate: 4 decimals if < 1 (common case), else 2 decimals.
"""

from __future__ import annotations

from typing import Union


Number = Union[int, float]


def _trimmed(fmt: str) -> str:
    """Trim trailing zeros and a trailing decimal point."""
    s = fmt.rstrip("0").rstrip(".")
    return s if s else "0"


def _fmt_amount(x: Number) -> str:
    """Amounts: 1 decimal if integer-like, else up to 2 decimals."""
    try:
        xf = float(x)
    except Exception:
        return str(x)
    if xf.is_integer():
        return f"{xf:.1f}"
    return _trimmed(f"{xf:.2f}")


def _fmt_rate(rate: Number) -> str:
    """Forward rate: 2 decimals if >=1, else up to 6 decimals (trim)."""
    r = float(rate)
    if r >= 1:
        return _trimmed(f"{r:.2f}")
    return _trimmed(f"{r:.6f}")


def _fmt_inverse(inv: Number) -> str:
    """Inverse rate: 4 decimals if <1 (typical), else 2 decimals (trim)."""
    r = float(inv)
    if r < 1:
        # keep 4 decimals like example: 0.0084
        return _trimmed(f"{r:.4f}")
    return _trimmed(f"{r:.2f}")


def format_result(date_str: str, base: str, target: str, rate: Number, from_amount: Number) -> str:
    """
    Build the 3-line message required by the assignment.

    Args:
        date_str: 'YYYY-MM-DD'
        base: e.g., 'AUD'
        target: e.g., 'USD'
        rate: forward rate (1 base = rate target)
        from_amount: amount in base currency

    Returns:
        A string with three lines.
    """
    r = float(rate)
    if r <= 0:
        raise ValueError("Rate must be positive.")

    amt_from = float(from_amount)
    amt_to = amt_from * r
    inv_rate = 1.0 / r

    line1 = f"The conversion rate on {date_str} from {base} to {target} was {_fmt_rate(r)}"
    line2 = (
        f"So {_fmt_amount(amt_from)} in {base} "
        f"correspond to {_fmt_amount(amt_to)} in {target}"
    )
    line3 = f"The inverse rate was {_fmt_inverse(inv_rate)}."

    return "\n".join([line1, line2, line3])